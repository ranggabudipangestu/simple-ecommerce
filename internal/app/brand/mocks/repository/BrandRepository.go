// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/ranggabudipangestu/simple-ecommerce/internal/app/brand/dto"
	mock "github.com/stretchr/testify/mock"

	model "github.com/ranggabudipangestu/simple-ecommerce/internal/model"
)

// BrandRepository is an autogenerated mock type for the BrandRepository type
type BrandRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *BrandRepository) Create(ctx context.Context, _a1 dto.InsertBrandDto) (*model.Brand, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *model.Brand
	if rf, ok := ret.Get(0).(func(context.Context, dto.InsertBrandDto) *model.Brand); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Brand)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.InsertBrandDto) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBrand provides a mock function with given fields: ctx, _a1
func (_m *BrandRepository) GetBrand(ctx context.Context, _a1 dto.FilterBrandDto) ([]model.Brand, error) {
	ret := _m.Called(ctx, _a1)

	var r0 []model.Brand
	if rf, ok := ret.Get(0).(func(context.Context, dto.FilterBrandDto) []model.Brand); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Brand)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.FilterBrandDto) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBrandRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewBrandRepository creates a new instance of BrandRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBrandRepository(t mockConstructorTestingTNewBrandRepository) *BrandRepository {
	mock := &BrandRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
