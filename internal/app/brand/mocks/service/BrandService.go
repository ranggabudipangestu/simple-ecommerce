// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/ranggabudipangestu/simple-ecommerce/internal/app/brand/dto"
	mock "github.com/stretchr/testify/mock"

	util "github.com/ranggabudipangestu/simple-ecommerce/pkg/util"
)

// BrandService is an autogenerated mock type for the BrandService type
type BrandService struct {
	mock.Mock
}

// CheckBrandById provides a mock function with given fields: ctx, id
func (_m *BrandService) CheckBrandById(ctx context.Context, id int) *util.Response {
	ret := _m.Called(ctx, id)

	var r0 *util.Response
	if rf, ok := ret.Get(0).(func(context.Context, int) *util.Response); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*util.Response)
		}
	}

	return r0
}

// Create provides a mock function with given fields: ctx, payload
func (_m *BrandService) Create(ctx context.Context, payload dto.InsertBrandDto) *util.Response {
	ret := _m.Called(ctx, payload)

	var r0 *util.Response
	if rf, ok := ret.Get(0).(func(context.Context, dto.InsertBrandDto) *util.Response); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*util.Response)
		}
	}

	return r0
}

type mockConstructorTestingTNewBrandService interface {
	mock.TestingT
	Cleanup(func())
}

// NewBrandService creates a new instance of BrandService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBrandService(t mockConstructorTestingTNewBrandService) *BrandService {
	mock := &BrandService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
