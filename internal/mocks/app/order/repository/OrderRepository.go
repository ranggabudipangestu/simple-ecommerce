// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/ranggabudipangestu/simple-ecommerce/internal/app/order/dto"
	mock "github.com/stretchr/testify/mock"

	model "github.com/ranggabudipangestu/simple-ecommerce/internal/model"
)

// OrderRepository is an autogenerated mock type for the OrderRepository type
type OrderRepository struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ctx, _a1, transactionNumber
func (_m *OrderRepository) CreateOrder(ctx context.Context, _a1 dto.CreateOrderDto, transactionNumber string) (*model.Transaction, error) {
	ret := _m.Called(ctx, _a1, transactionNumber)

	var r0 *model.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateOrderDto, string) *model.Transaction); ok {
		r0 = rf(ctx, _a1, transactionNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.CreateOrderDto, string) error); ok {
		r1 = rf(ctx, _a1, transactionNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderDetails provides a mock function with given fields: ctx, id
func (_m *OrderRepository) GetOrderDetails(ctx context.Context, id int) (*dto.GetOrderDto, error) {
	ret := _m.Called(ctx, id)

	var r0 *dto.GetOrderDto
	if rf, ok := ret.Get(0).(func(context.Context, int) *dto.GetOrderDto); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GetOrderDto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOrderRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderRepository creates a new instance of OrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderRepository(t mockConstructorTestingTNewOrderRepository) *OrderRepository {
	mock := &OrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
