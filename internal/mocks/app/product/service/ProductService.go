// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/ranggabudipangestu/simple-ecommerce/internal/app/product/dto"
	mock "github.com/stretchr/testify/mock"
)

// ProductService is an autogenerated mock type for the ProductService type
type ProductService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *ProductService) Create(ctx context.Context, _a1 dto.InsertProductDto) (interface{}, error, string) {
	ret := _m.Called(ctx, _a1)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, dto.InsertProductDto) interface{}); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.InsertProductDto) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	var r2 string
	if rf, ok := ret.Get(2).(func(context.Context, dto.InsertProductDto) string); ok {
		r2 = rf(ctx, _a1)
	} else {
		r2 = ret.Get(2).(string)
	}

	return r0, r1, r2
}

// GetProductByBrand provides a mock function with given fields: ctx, brandId
func (_m *ProductService) GetProductByBrand(ctx context.Context, brandId int) (interface{}, error, string) {
	ret := _m.Called(ctx, brandId)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, int) interface{}); ok {
		r0 = rf(ctx, brandId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, brandId)
	} else {
		r1 = ret.Error(1)
	}

	var r2 string
	if rf, ok := ret.Get(2).(func(context.Context, int) string); ok {
		r2 = rf(ctx, brandId)
	} else {
		r2 = ret.Get(2).(string)
	}

	return r0, r1, r2
}

// GetProductById provides a mock function with given fields: ctx, id
func (_m *ProductService) GetProductById(ctx context.Context, id int) (*dto.GetProduct, error, string) {
	ret := _m.Called(ctx, id)

	var r0 *dto.GetProduct
	if rf, ok := ret.Get(0).(func(context.Context, int) *dto.GetProduct); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GetProduct)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	var r2 string
	if rf, ok := ret.Get(2).(func(context.Context, int) string); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Get(2).(string)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewProductService interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductService creates a new instance of ProductService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductService(t mockConstructorTestingTNewProductService) *ProductService {
	mock := &ProductService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
